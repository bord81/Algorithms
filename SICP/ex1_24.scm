(define (timed-prime-test n)
    (start-prime-test n (process-time-clock)))
(define (start-prime-test n start-time) 
    (search-for-primes (+ n 1) 3)
    (report-prime (- (process-time-clock) start-time)))
(define (report-prime elapsed-time)
    (newline)
  (display "Total search time is about: ")
  (display elapsed-time))
(define (search-for-primes more-than times)
    (if (> times 0)
        (if (fast-prime? more-than 10)
        (begin
            (newline)
            (display more-than)
            (search-for-primes (+ more-than 1) (- times 1)))       
            (search-for-primes (+ more-than 1) times))))
(define (fast-prime? n times) 
    (cond ((= times 0) true)
    ((fermat-test n) (fast-prime? n (- times 1))) 
    (else false)))
(define (fermat-test n) (define (try-it a)
    (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))
(define (expmod base exp m) (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
            m)) (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
